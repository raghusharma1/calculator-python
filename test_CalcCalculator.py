# ********RoostGPT********
"""
Test generated by RoostGPT for test pythontest1 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=calculator_0d311cba58
ROOST_METHOD_SIG_HASH=calculator_ad84dc0779


Scenario 1: Validate calculator function with addition operation
Details:
  TestName: test_calculator_addition
  Description: This test verifies that the calculator function correctly performs addition when the '+' operation is passed.
Execution:
  Arrange: Initialize two numbers and the operation '+'.
  Act: Invoke the calculator function with the two numbers and the operation.
  Assert: Verify that the output matches the expected sum of the two numbers.
Validation:
  It's important to ensure that the calculator function can correctly perform addition as it is a fundamental operation in any calculator.

Scenario 2: Validate calculator function with division operation
Details:
  TestName: test_calculator_division
  Description: This test verifies that the calculator function correctly performs division when the '/' operation is passed.
Execution:
  Arrange: Initialize two numbers and the operation '/'.
  Act: Invoke the calculator function with the two numbers and the operation.
  Assert: Verify that the output matches the expected quotient of the two numbers.
Validation:
  This test ensures that the calculator function can correctly perform division, another fundamental operation in any calculator.

Scenario 3: Validate calculator function with division by zero
Details:
  TestName: test_calculator_division_zero
  Description: This test verifies that the calculator function correctly handles division by zero.
Execution:
  Arrange: Initialize a number and zero, and the operation '/'.
  Act: Invoke the calculator function with the number, zero, and the operation.
  Assert: Verify that the output is "Cannot divide by zero".
Validation:
  This test is important as dividing by zero is undefined in mathematics. The calculator function should handle this case gracefully and return an appropriate error message.

Scenario 4: Validate calculator function with invalid operation
Details:
  TestName: test_calculator_invalid_operation
  Description: This test verifies that the calculator function correctly handles an invalid operation.
Execution:
  Arrange: Initialize two numbers and an invalid operation (not '+' or '/').
  Act: Invoke the calculator function with the two numbers and the invalid operation.
  Assert: Verify that the output is "Invalid operation".
Validation:
  This test ensures that the calculator function can correctly handle an invalid operation and return an appropriate error message. This is important for maintaining the integrity of the calculator function and preventing unexpected behavior.
"""

# ********RoostGPT********
import pytest
from calc import calculator

class Test_CalcCalculator:
    
    @pytest.mark.positive
    def test_calculator_addition(self):
        # Arrange
        num1 = 10
        num2 = 5
        operation = '+'
        expected_result = 15

        # Act
        result = calculator(num1, num2, operation)

        # Assert
        assert result == expected_result, f"For {num1} + {num2}, expected {expected_result} but got {result}"
        
    @pytest.mark.positive
    def test_calculator_division(self):
        # Arrange
        num1 = 10
        num2 = 5
        operation = '/'
        expected_result = 2

        # Act
        result = calculator(num1, num2, operation)

        # Assert
        assert result == expected_result, f"For {num1} / {num2}, expected {expected_result} but got {result}"
        
    @pytest.mark.negative
    def test_calculator_division_zero(self):
        # Arrange
        num1 = 10
        num2 = 0
        operation = '/'
        expected_result = "Cannot divide by zero"

        # Act
        result = calculator(num1, num2, operation)

        # Assert
        assert result == expected_result, f"For {num1} / {num2}, expected {expected_result} but got {result}"
        
    @pytest.mark.negative
    def test_calculator_invalid_operation(self):
        # Arrange
        num1 = 10
        num2 = 5
        operation = '*'
        expected_result = "Invalid operation"

        # Act
        result = calculator(num1, num2, operation)

        # Assert
        assert result == expected_result, f"For {num1} {operation} {num2}, expected {expected_result} but got {result}"
